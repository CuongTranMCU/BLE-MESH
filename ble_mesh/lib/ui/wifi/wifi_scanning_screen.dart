import 'dart:async';
import 'package:ble_mesh/widgets/loading.dart';
import 'package:geolocator/geolocator.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:ble_mesh/ui/wifi/wifi_config_screen.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:wifi_scan/wifi_scan.dart';
import '../../widgets/custom_widgets.dart';

/// Example app for wifi_scan plugin.
class WifiScanningScreen extends StatefulWidget {
  /// Default constructor for [WifiScanningScreen] widget.
  const WifiScanningScreen({Key? key}) : super(key: key);

  @override
  State<WifiScanningScreen> createState() => _WifiScanningScreenState();
}

class _WifiScanningScreenState extends State<WifiScanningScreen> {
  List<WiFiAccessPoint> accessPoints = <WiFiAccessPoint>[];
  Timer? _timer;

  @override
  void initState() {
    super.initState();
    _initializeScan();
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  Future<void> _initializeScan() async {
    _startPeriodicScan();
  }

  void _startPeriodicScan() async {
    if (mounted) {
      await _getScannedResults();
    }

    _timer = Timer.periodic(const Duration(seconds: 5), (timer) async {
      if (mounted) {
        await _getScannedResults();
      }
    });
  }

  Future<void> _getScannedResults() async {
    if (await _canGetScannedResults()) {
      // L·∫•y danh s√°ch k·∫øt qu·∫£ qu√©t WiFi
      final accessPoints = await WiFiScan.instance.getScannedResults();

      final filteredResults = accessPoints.where((ap) => ap.ssid.isNotEmpty && ap.level > -90).toList();

      // Lo·∫°i b·ªè c√°c SSID tr√πng nhau, ch·ªâ gi·ªØ l·∫°i BSSID c√≥ t√≠n hi·ªáu m·∫°nh nh·∫•t
      Map<String, WiFiAccessPoint> bestAPs = {};

      for (var ap in filteredResults) {
        if (!bestAPs.containsKey(ap.ssid) || bestAPs[ap.ssid]!.level < ap.level) {
          bestAPs[ap.ssid] = ap;
        }
      }

      if (mounted) {
        setState(() {
          this.accessPoints = bestAPs.values.toList();
        });
      }

      // In danh s√°ch sau khi l·ªçc
      // for (var ap in accessPoints) {
      //   print("üîπ SSID: ${ap.ssid}, BSSID: ${ap.bssid}, Level: ${ap.level}");
      // }
    }
  }

  Future<bool> _canGetScannedResults() async {
    // 1. Ki·ªÉm tra d·ªãch v·ª• ƒë·ªãnh v·ªã
    if (!await _checkLocationService()) return false;

    // 2. Ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠
    if (!await _checkLocationPermission()) return false;

    // 3. Ki·ªÉm tra kh·∫£ nƒÉng qu√©t Wi-Fi
    return await _checkWifiScanCapability();
  }

// Ki·ªÉm tra d·ªãch v·ª• ƒë·ªãnh v·ªã
  Future<bool> _checkLocationService() async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      showError("D·ªãch v·ª• ƒë·ªãnh v·ªã ƒëang t·∫Øt. Vui l√≤ng b·∫≠t ƒë·ªãnh v·ªã ƒë·ªÉ qu√©t Wi-Fi.");
      await Geolocator.openLocationSettings();
      return false;
    }
    return true;
  }

// Ki·ªÉm tra quy·ªÅn truy c·∫≠p v·ªã tr√≠
  Future<bool> _checkLocationPermission() async {
    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
    }

    if (permission == LocationPermission.denied) {
      showError("·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë·ªÉ qu√©t Wi-Fi.");
      return false;
    }

    if (permission == LocationPermission.deniedForever) {
      showError("Quy·ªÅn v·ªã tr√≠ ƒë√£ b·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn. Vui l√≤ng c·∫•p quy·ªÅn trong c√†i ƒë·∫∑t.");
      await openAppSettings();
      return false;
    }

    return true;
  }

// Ki·ªÉm tra kh·∫£ nƒÉng qu√©t Wi-Fi
  Future<bool> _checkWifiScanCapability() async {
    final can = await WiFiScan.instance.canGetScannedResults(askPermissions: true);
    if (can != CanGetScannedResults.yes) {
      String message;
      switch (can) {
        case CanGetScannedResults.notSupported:
          message = "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ qu√©t Wi-Fi.";
          break;
        case CanGetScannedResults.noLocationPermissionRequired:
          message = "·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë·ªÉ qu√©t Wi-Fi.";
          break;
        case CanGetScannedResults.noLocationPermissionDenied:
          message = "Quy·ªÅn truy c·∫≠p v·ªã tr√≠ ƒë√£ b·ªã t·ª´ ch·ªëi.";
          break;
        case CanGetScannedResults.noLocationPermissionUpgradeAccuracy:
          message = "C·∫ßn quy·ªÅn truy c·∫≠p v·ªã tr√≠ v·ªõi ƒë·ªô ch√≠nh x√°c cao.";
          break;
        case CanGetScannedResults.noLocationServiceDisabled:
          message = "D·ªãch v·ª• v·ªã tr√≠ ƒë√£ t·∫Øt. Vui l√≤ng b·∫≠t n√≥ t·ª´ c√†i ƒë·∫∑t.";
          break;
        default:
          message = "Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ qu√©t Wi-Fi: $can";
      }
      showError(message);
      return false;
    }
    return true;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Wi-Fi'),
        titleTextStyle: const TextStyle(color: Colors.black, fontSize: 24, fontWeight: FontWeight.bold),
        centerTitle: true,
        leading: Padding(
          padding: const EdgeInsets.only(left: 15),
          child: IconButton(
            onPressed: () => Navigator.pop(context),
            icon: const Icon(Icons.arrow_back_ios, color: Colors.black, size: 28),
          ),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 20),
        child: accessPoints.isEmpty
            ? const Center(child: Text("Kh√¥ng t√¨m th·∫•y m·∫°ng Wi-Fi n√†o."))
            : ListView.builder(
                itemCount: accessPoints.length,
                itemBuilder: (context, i) => _AccessPointTile(accessPoint: accessPoints[i]),
              ),
      ),
    );
  }
}

class _AccessPointTile extends StatelessWidget {
  final WiFiAccessPoint accessPoint;
  const _AccessPointTile({Key? key, required this.accessPoint}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final SSID = accessPoint.ssid.isNotEmpty ? accessPoint.ssid : "**EMPTY**";
    final signalIcon = wifiIcon(accessPoint.level);
    final frequency = (accessPoint.frequency / 1024).toStringAsFixed(1);

    return ListTile(
      leading: signalIcon,
      title: Text(SSID),
      titleTextStyle: const TextStyle(color: Colors.black),
      trailing: Text(
        "$frequency GHz",
        style: const TextStyle(color: Colors.black),
      ),
      onTap: () {
        final myAppState = context.findAncestorStateOfType<_WifiScanningScreenState>();
        myAppState?._timer?.cancel();
        Navigator.of(context)
            .push(MaterialPageRoute(
          builder: (context) => WifiConfigScreen(
            SSID: SSID,
            BSSID: accessPoint.bssid,
          ),
        ))
            .then((_) {
          myAppState?._startPeriodicScan();
        });
      },
    );
  }
}
